"use client"

import { useState, useEffect } from "react"
import { ImageIcon, Loader2, RefreshCw } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"

interface WordVisualizationProps {
  word: string
  language: string
  onImageGenerated?: (imageUrl: string) => void
}

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const generateMockImage = async (word: string): Promise<string> => {
  // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
  await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000))
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –∑–∞–≥–ª—É—à–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
  const encodedWord = encodeURIComponent(word)
  return `https://via.placeholder.com/300x200/6366f1/ffffff?text=${encodedWord}`
}

export function WordVisualization({ word, language, onImageGenerated }: WordVisualizationProps) {
  const [imageUrl, setImageUrl] = useState<string | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const generateImage = async () => {
    if (!word.trim()) return

    setIsLoading(true)
    setError(null)

    try {
      const url = await generateMockImage(word.trim())
      setImageUrl(url)
      onImageGenerated?.(url)
    } catch (err) {
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
      console.error("Image generation error:", err)
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    if (word.trim()) {
      generateImage()
    } else {
      setImageUrl(null)
      setError(null)
    }
  }, [word])

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-lg">
          <ImageIcon className="h-5 w-5" />
          –í–∏–∑—É–∞–ª—å–Ω–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {/* –û–±–ª–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
          <div className="relative aspect-[3/2] bg-muted rounded-lg overflow-hidden">
            {isLoading ? (
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="text-center space-y-2">
                  <Loader2 className="h-8 w-8 animate-spin mx-auto text-primary" />
                  <p className="text-sm text-muted-foreground">
                    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...
                  </p>
                </div>
              </div>
            ) : error ? (
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="text-center space-y-2">
                  <ImageIcon className="h-8 w-8 mx-auto text-muted-foreground" />
                  <p className="text-sm text-destructive">{error}</p>
                </div>
              </div>
            ) : imageUrl ? (
              <img
                src={imageUrl}
                alt={`–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è "${word}"`}
                className="w-full h-full object-cover"
                onError={() => setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")}
              />
            ) : (
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="text-center space-y-2">
                  <ImageIcon className="h-8 w-8 mx-auto text-muted-foreground" />
                  <p className="text-sm text-muted-foreground">
                    –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞
                  </p>
                </div>
              </div>
            )}
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
          {word.trim() && (
            <Button
              variant="outline"
              size="sm"
              onClick={generateImage}
              disabled={isLoading}
              className="w-full"
            >
              <RefreshCw className={`mr-2 h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />
              {isLoading ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}
            </Button>
          )}

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="text-xs text-muted-foreground space-y-1">
            <p>
              üé® <strong>–ó–∞–≥–ª—É—à–∫–∞:</strong> –í —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DALL-E API
            </p>
            <p>
              üí° –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–æ–≥–∞—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–ª–æ–≤
            </p>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}
